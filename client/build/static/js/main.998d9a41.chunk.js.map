{"version":3,"sources":["components/Navbar.js","components/Home.js","components/Dashboard.js","components/blog/NewBlog.js","serviceWorker.js","index.js","App.js"],"names":["components_Navbar","_ref","path","react_default","a","createElement","Navbar","bg","variant","Brand","href","Toggle","Collapse","className","Fragment","Button","Home","Card","style","flex","justifyContent","alignItems","Title","Text","Dashboard","props","useEffect","console","log","onClick","position","right","bottom","NewBlog","Form","margin","Group","controlId","Label","Control","type","placeholder","as","rows","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","react_router","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.998d9a41.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Button } from 'react-bootstrap';\n\nexport default function({ path }) {\n  const renderContent = () => {\n    if (path === 'DASHBOARD') {\n      return (\n        <React.Fragment>\n          <Button bg=\"dark\" variant=\"dark\">\n            MyBlogs\n          </Button>\n          <Button bg=\"dark\" variant=\"dark\">\n            <a href=\"/auth/logout\">Logout</a>\n          </Button>\n        </React.Fragment>\n      );\n    }\n    return (\n      <Button bg=\"dark\" variant=\"dark\">\n        <a href=\"/auth/google\">SignIn With Google</a>\n      </Button>\n    );\n  };\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand href=\"#home\">BlogSter</Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse className=\"justify-content-end\">\n        {renderContent()}\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport Navbar from './Navbar';\n\nexport default function() {\n  return (\n    <div>\n      <Navbar path=\"HOME\" />\n      <Card\n        style={{\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        }}\n      >\n        <Card.Title>BLOGSTER</Card.Title>\n        <Card.Text>Write private blogs</Card.Text>\n      </Card>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport axios from 'axios';\n\nimport Navbar from './Navbar';\n\nexport default function(props) {\n  const addBlog = () => {\n    console.log('clicked');\n  };\n  useEffect(() => {\n    console.log(props)\n  }, []);\n  return (\n    <div style={{ flex: 1 }}>\n      <Navbar path=\"DASHBOARD\" />\n      <Card\n        style={{\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center'\n        }}\n      >\n        <Card.Title>Last Activities</Card.Title>\n      </Card>\n      <Button\n        onClick={addBlog}\n        variant=\"dark\"\n        style={{ position: 'absolute', right: 35, bottom: 35 }}\n      >\n        <a href={'blogs/new'}>New Blog</a>\n      </Button>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Form, Button } from 'react-bootstrap';\n\nimport Navbar from '../Navbar'\n\nexport default function() {\n  return (\n    <React.Fragment>\n      <Navbar path=\"DASHBOARD\" />\n      <Form>\n        <div style={{ margin: 25 }}>\n          <Form.Group controlId=\"exampleForm.ControlInput1\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"MyAwesomeBlog\" />\n          </Form.Group>\n          <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n            <Form.Label>Content</Form.Label>\n            <Form.Control as=\"textarea\" rows=\"10\" />\n          </Form.Group>\n          <Button variant=\"dark\">\n            <a>Done</a>\n          </Button>\n        </div>\n      </Form>\n    </React.Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Home from './components/Home';\nimport Dashboard from './components/Dashboard';\nimport NewBlog from './components/blog/NewBlog';\n\nexport default function() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/auth/google\" />\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/blogs\" component={Dashboard} />\n        <Route path=\"/blogs/new\" component={NewBlog} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n"],"sourceRoot":""}